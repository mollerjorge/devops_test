name: Coverage Diff

on:
  push:
    branches:
      - master
      - main
  pull_request: {}

jobs:
  test:
    name: Coverage Diff
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: npm
      - run: npm install
      - run: npm run test
      - name: Coverage Diff
        uses: greatwizard/coverage-diff-action@v1
        with:
<<<<<<< Updated upstream
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate PR coverage
        id: pr-coverage
        run: |
          npm run test:coverage
          
          # Extract basic coverage metrics from the Jest output in the console
          COVERAGE_OUTPUT=$(npm run test:coverage 2>&1)
          echo "$COVERAGE_OUTPUT" > pr_coverage_output.txt
          
          # Extract the lines coverage percentage
          PR_LINE_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $5}')
          PR_STATEMENT_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $3}')
          PR_BRANCH_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $4}')
          PR_FUNCTION_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $5}')
          
          # Store the metrics
          echo "PR_LINE_COVERAGE=${PR_LINE_COVERAGE}" >> $GITHUB_ENV
          echo "PR_STATEMENT_COVERAGE=${PR_STATEMENT_COVERAGE}" >> $GITHUB_ENV
          echo "PR_BRANCH_COVERAGE=${PR_BRANCH_COVERAGE}" >> $GITHUB_ENV
          echo "PR_FUNCTION_COVERAGE=${PR_FUNCTION_COVERAGE}" >> $GITHUB_ENV
          
          # Save the list of modified files for later use
          git diff --name-only ${{ github.event.pull_request.base.sha }} > modified_files.txt
      
      - name: Checkout base branch
        run: git checkout ${{ github.event.pull_request.base.sha }}
      
      - name: Install dependencies on base branch
        run: npm ci
      
      - name: Generate base coverage
        id: base-coverage
        run: |
          # Run tests with coverage and capture output
          COVERAGE_OUTPUT=$(npm run test:coverage 2>&1)
          echo "$COVERAGE_OUTPUT" > base_coverage_output.txt
          
          # Extract the coverage percentages
          BASE_LINE_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $5}')
          BASE_STATEMENT_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $3}')
          BASE_BRANCH_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $4}')
          BASE_FUNCTION_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $5}')
          
          # Store the metrics
          echo "BASE_LINE_COVERAGE=${BASE_LINE_COVERAGE}" >> $GITHUB_ENV
          echo "BASE_STATEMENT_COVERAGE=${BASE_STATEMENT_COVERAGE}" >> $GITHUB_ENV
          echo "BASE_BRANCH_COVERAGE=${BASE_BRANCH_COVERAGE}" >> $GITHUB_ENV
          echo "BASE_FUNCTION_COVERAGE=${BASE_FUNCTION_COVERAGE}" >> $GITHUB_ENV
      
      - name: Generate coverage report
        id: report
        run: |
<<<<<<< Updated upstream
          # Check if coverage data was successfully extracted
          if [ -z "${{ env.PR_LINE_COVERAGE }}" ] || [ -z "${{ env.BASE_LINE_COVERAGE }}" ]; then
            echo "Failed to extract coverage data. Using simplified metrics."
            echo "PR_COVERAGE_FOUND=false" >> $GITHUB_ENV
=======
          PR_COV="${{ env.PR_COVERAGE }}"
          BASE_COV="${{ env.BASE_COVERAGE }}"
          
          # Remove percentage sign if present
          PR_COV=${PR_COV//%/}
          BASE_COV=${BASE_COV//%/}
          
          # Calculate the difference
          DIFF=$(echo "$PR_COV - $BASE_COV" | bc)
          echo "COVERAGE_DIFF=$DIFF" >> $GITHUB_ENV
          
          # Calculate statements, branches, functions differences
          PR_STMTS="${{ env.PR_STATEMENTS }}"
          BASE_STMTS="${{ env.BASE_STATEMENTS }}"
          PR_STMTS=${PR_STMTS//%/}
          BASE_STMTS=${BASE_STMTS//%/}
          STMTS_DIFF=$(echo "$PR_STMTS - $BASE_STMTS" | bc)
          echo "STMTS_DIFF=$STMTS_DIFF" >> $GITHUB_ENV
          
          PR_BRNCH="${{ env.PR_BRANCHES }}"
          BASE_BRNCH="${{ env.BASE_BRANCHES }}"
          PR_BRNCH=${PR_BRNCH//%/}
          BASE_BRNCH=${BASE_BRNCH//%/}
          BRNCH_DIFF=$(echo "$PR_BRNCH - $BASE_BRNCH" | bc)
          echo "BRNCH_DIFF=$BRNCH_DIFF" >> $GITHUB_ENV
          
          PR_FUNC="${{ env.PR_FUNCTIONS }}"
          BASE_FUNC="${{ env.BASE_FUNCTIONS }}"
          PR_FUNC=${PR_FUNC//%/}
          BASE_FUNC=${BASE_FUNC//%/}
          FUNC_DIFF=$(echo "$PR_FUNC - $BASE_FUNC" | bc)
          echo "FUNC_DIFF=$FUNC_DIFF" >> $GITHUB_ENV
          
          # Check if any metric has improved significantly
          IMPROVED="false"
          if (( $(echo "$DIFF > 0" | bc -l) )) || 
             (( $(echo "$STMTS_DIFF > 0" | bc -l) )) || 
             (( $(echo "$BRNCH_DIFF > 0" | bc -l) )) || 
             (( $(echo "$FUNC_DIFF > 0" | bc -l) )); then
            IMPROVED="true"
          fi
          echo "ANY_METRIC_IMPROVED=$IMPROVED" >> $GITHUB_ENV
          
          # Check if any metric is significantly better (>5%)
          SIGNIFICANT="false"
          if (( $(echo "$DIFF >= 5" | bc -l) )) || 
             (( $(echo "$STMTS_DIFF >= 5" | bc -l) )) || 
             (( $(echo "$BRNCH_DIFF >= 5" | bc -l) )) || 
             (( $(echo "$FUNC_DIFF >= 5" | bc -l) )); then
            SIGNIFICANT="true"
          fi
          echo "SIGNIFICANT_IMPROVEMENT=$SIGNIFICANT" >> $GITHUB_ENV
          
          if (( $(echo "$DIFF >= 0" | bc -l) )); then
            ICON="✅"
>>>>>>> Stashed changes
          else
            echo "PR_COVERAGE_FOUND=true" >> $GITHUB_ENV
            
            # Process coverage values (remove % sign if present)
            PR_LINE=${PR_LINE_COVERAGE//%/}
            BASE_LINE=${BASE_LINE_COVERAGE//%/}
            PR_STMT=${PR_STATEMENT_COVERAGE//%/}
            BASE_STMT=${BASE_STATEMENT_COVERAGE//%/}
            PR_BRNCH=${PR_BRANCH_COVERAGE//%/}
            BASE_BRNCH=${BASE_BRANCH_COVERAGE//%/}
            PR_FUNC=${PR_FUNCTION_COVERAGE//%/}
            BASE_FUNC=${BASE_FUNCTION_COVERAGE//%/}
            
            # Calculate differences
            LINE_DIFF=$(echo "$PR_LINE - $BASE_LINE" | bc -l)
            STMT_DIFF=$(echo "$PR_STMT - $BASE_STMT" | bc -l)
            BRNCH_DIFF=$(echo "$PR_BRNCH - $BASE_BRNCH" | bc -l)
            FUNC_DIFF=$(echo "$PR_FUNC - $BASE_FUNC" | bc -l)
            
            # Save the differences
            echo "LINE_DIFF=${LINE_DIFF}" >> $GITHUB_ENV
            echo "STMT_DIFF=${STMT_DIFF}" >> $GITHUB_ENV
            echo "BRNCH_DIFF=${BRNCH_DIFF}" >> $GITHUB_ENV
            echo "FUNC_DIFF=${FUNC_DIFF}" >> $GITHUB_ENV
            
            # Determine overall impact by checking if ANY metric has improved
            # If at least one metric is non-negative, consider it positive impact
            HAS_POSITIVE=$(echo "$LINE_DIFF > 0 || $STMT_DIFF > 0 || $BRNCH_DIFF > 0 || $FUNC_DIFF > 0" | bc -l)
            
            if [ "$HAS_POSITIVE" -eq 1 ]; then
              echo "COVERAGE_IMPACT=positive" >> $GITHUB_ENV
              
              # Check for significant increases in ANY metric
              HAS_SIGNIFICANT=$(echo "$LINE_DIFF >= 5 || $STMT_DIFF >= 5 || $BRNCH_DIFF >= 5 || $FUNC_DIFF >= 5" | bc -l)
              if [ "$HAS_SIGNIFICANT" -eq 1 ]; then
                echo "COVERAGE_SIGNIFICANCE=significant" >> $GITHUB_ENV
              else
                echo "COVERAGE_SIGNIFICANCE=minor" >> $GITHUB_ENV
              fi
            else
              echo "COVERAGE_IMPACT=negative" >> $GITHUB_ENV
              
              # Check for significant decreases in ANY metric
              HAS_SIGNIFICANT_DECREASE=$(echo "$LINE_DIFF <= -5 || $STMT_DIFF <= -5 || $BRNCH_DIFF <= -5 || $FUNC_DIFF <= -5" | bc -l)
              if [ "$HAS_SIGNIFICANT_DECREASE" -eq 1 ]; then
                echo "COVERAGE_SIGNIFICANCE=significant" >> $GITHUB_ENV
              else
                echo "COVERAGE_SIGNIFICANCE=minor" >> $GITHUB_ENV
              fi
            fi
          fi
          
          # Extract the list of modified files with JS/TS extensions
          echo "MODIFIED_FILES=" > modified_files_report.txt
          grep -E "\.(js|jsx|ts|tsx)$" modified_files.txt >> modified_files_report.txt
      
      - name: Post coverage comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
<<<<<<< Updated upstream
            // Helper function to format coverage values
            const formatCoverage = (value) => {
              if (!value) return 'N/A';
              return value.includes('%') ? value : `${value}%`;
=======
            // Statements, branches, functions
            const prStatements = process.env.PR_STATEMENTS;
            const baseStatements = process.env.BASE_STATEMENTS;
            const stmtsDiff = process.env.STMTS_DIFF;
            
            const prBranches = process.env.PR_BRANCHES;
            const baseBranches = process.env.BASE_BRANCHES;
            const brnchDiff = process.env.BRNCH_DIFF;
            
            const prFunctions = process.env.PR_FUNCTIONS;
            const baseFunctions = process.env.BASE_FUNCTIONS;
            const funcDiff = process.env.FUNC_DIFF;
            
            const modifiedFilesCoverage = process.env.MODIFIED_FILES_COVERAGE;
            const anyMetricImproved = process.env.ANY_METRIC_IMPROVED === 'true';
            const significantImprovement = process.env.SIGNIFICANT_IMPROVEMENT === 'true';
            
            // Format differences with + sign for positive changes
            const formatDiff = (val) => {
              const num = parseFloat(val);
              return num >= 0 ? `+${num}%` : `${num}%`;
>>>>>>> Stashed changes
            };
            
            // Helper function to format differences
            const formatDiff = (value) => {
              if (!value) return 'N/A';
              const numValue = parseFloat(value);
              if (isNaN(numValue)) return 'N/A';
              return numValue >= 0 ? `+${numValue.toFixed(2)}%` : `${numValue.toFixed(2)}%`;
            };
            
<<<<<<< Updated upstream
            // Helper function to create status indicators
            const getStatusIcon = (value) => {
              if (!value) return '';
              const numValue = parseFloat(value);
              if (isNaN(numValue)) return '';
              return numValue >= 0 ? '✅' : '⚠️';
            };
=======
            // Find best and worst metrics
            const findBestMetric = () => {
              const metrics = [
                { name: 'Lines', diff: parseFloat(diff) || 0, formatted: formatDiff(diff) },
                { name: 'Statements', diff: parseFloat(stmtsDiff) || 0, formatted: formatDiff(stmtsDiff) },
                { name: 'Branches', diff: parseFloat(brnchDiff) || 0, formatted: formatDiff(brnchDiff) },
                { name: 'Functions', diff: parseFloat(funcDiff) || 0, formatted: formatDiff(funcDiff) }
              ].filter(m => !isNaN(m.diff));
              
              // Sort by highest diff value
              metrics.sort((a, b) => b.diff - a.diff);
              return metrics.length > 0 ? metrics[0] : null;
            };
            
            const bestMetric = findBestMetric();
            
            // Build the comment sections
            let overview = `## Test Coverage Report ${icon}\n\n`;
            overview += `### Overview\n\n`;
            overview += `| Metric | Base Branch | PR Branch | Difference |\n`;
            overview += `| ------ | :---------: | :-------: | :--------: |\n`;
            overview += `| **Lines** | ${baseCoverage || 'N/A'} | ${prCoverage || 'N/A'} | ${statusIcon(diff)} ${formatDiff(diff)} |\n`;
            overview += `| **Statements** | ${baseStatements || 'N/A'} | ${prStatements || 'N/A'} | ${statusIcon(stmtsDiff)} ${formatDiff(stmtsDiff)} |\n`;
            overview += `| **Branches** | ${baseBranches || 'N/A'} | ${prBranches || 'N/A'} | ${statusIcon(brnchDiff)} ${formatDiff(brnchDiff)} |\n`;
            overview += `| **Functions** | ${baseFunctions || 'N/A'} | ${prFunctions || 'N/A'} | ${statusIcon(funcDiff)} ${formatDiff(funcDiff)} |\n\n`;
            
            let filesSection = `### Modified Files Coverage\n\n`;
            filesSection += `${modifiedFilesCoverage ? modifiedFilesCoverage : "No coverage data available for modified files"}\n\n`;
            
            let summary = `### Summary\n\n`;
            
            // Determine summary message based on metrics
            if (anyMetricImproved) {
              summary += `✅ **Good work!** ${bestMetric ? `**${bestMetric.name}** coverage has improved by ${bestMetric.formatted}.` : 'Test coverage has improved.'}\n\n`;
              
              if (significantImprovement) {
                summary += `🎉 Excellent work! You've made significant test coverage improvements.`;
              }
            } else if (parseFloat(diff) === 0 && parseFloat(stmtsDiff) === 0 && parseFloat(brnchDiff) === 0 && parseFloat(funcDiff) === 0) {
              summary += `ℹ️ Test coverage has remained the same.`;
            } else {
              summary += `⚠️ **Warning:** Test coverage has decreased with this PR. Consider adding more tests to cover your changes.\n\n`;
              
              if (parseFloat(diff) > -5 && parseFloat(stmtsDiff) > -5 && parseFloat(brnchDiff) > -5 && parseFloat(funcDiff) > -5) {
                summary += `The decrease is small, but adding a few tests would help maintain quality.`;
              } else {
                summary += `This represents a significant decrease in coverage. Please add tests to cover your changes.`;
              }
            }
            
            // Combine all sections
            const comment = `${overview}${filesSection}${summary}`;
>>>>>>> Stashed changes
            
            // Find the best performing metric for highlighting
            const findHighlight = () => {
              const metrics = [
                { name: 'Lines', diff: process.env.LINE_DIFF },
                { name: 'Statements', diff: process.env.STMT_DIFF },
                { name: 'Branches', diff: process.env.BRNCH_DIFF },
                { name: 'Functions', diff: process.env.FUNC_DIFF }
              ];
              
              // Filter for valid metrics and sort by highest improvement
              return metrics
                .filter(m => m.diff && !isNaN(parseFloat(m.diff)))
                .sort((a, b) => parseFloat(b.diff) - parseFloat(a.diff))[0];
            };
            
            // Build comment heading
            let commentBody = '## Test Coverage Report\n\n';
            
            // Check if we got valid coverage data
            const coverageFound = process.env.PR_COVERAGE_FOUND === 'true';
            if (!coverageFound) {
              commentBody += '⚠️ Coverage data could not be properly extracted. Please check the workflow logs for details.\n\n';
            } else {
              // Build the overview section
              commentBody += '### Overview\n\n';
              commentBody += '| Metric | Base Branch | PR Branch | Difference |\n';
              commentBody += '| ------ | :---------: | :-------: | :--------: |\n';
              
              // Add line coverage
              const lineDiff = process.env.LINE_DIFF;
              commentBody += `| **Lines** | ${formatCoverage(process.env.BASE_LINE_COVERAGE)} | ${formatCoverage(process.env.PR_LINE_COVERAGE)} | ${getStatusIcon(lineDiff)} ${formatDiff(lineDiff)} |\n`;
              
              // Add statement coverage
              const stmtDiff = process.env.STMT_DIFF;
              commentBody += `| **Statements** | ${formatCoverage(process.env.BASE_STATEMENT_COVERAGE)} | ${formatCoverage(process.env.PR_STATEMENT_COVERAGE)} | ${getStatusIcon(stmtDiff)} ${formatDiff(stmtDiff)} |\n`;
              
              // Add branch coverage
              const brnchDiff = process.env.BRNCH_DIFF;
              commentBody += `| **Branches** | ${formatCoverage(process.env.BASE_BRANCH_COVERAGE)} | ${formatCoverage(process.env.PR_BRANCH_COVERAGE)} | ${getStatusIcon(brnchDiff)} ${formatDiff(brnchDiff)} |\n`;
              
              // Add function coverage
              const funcDiff = process.env.FUNC_DIFF;
              commentBody += `| **Functions** | ${formatCoverage(process.env.BASE_FUNCTION_COVERAGE)} | ${formatCoverage(process.env.PR_FUNCTION_COVERAGE)} | ${getStatusIcon(funcDiff)} ${formatDiff(funcDiff)} |\n\n`;
              
              // Add modified files section
              let modifiedFiles = '';
              try {
                if (fs.existsSync('modified_files_report.txt')) {
                  modifiedFiles = fs.readFileSync('modified_files_report.txt', 'utf8');
                }
              } catch (error) {
                modifiedFiles = 'Error reading modified files: ' + error.message;
              }
              
              if (modifiedFiles && !modifiedFiles.includes('MODIFIED_FILES=')) {
                commentBody += '### Modified Files\n\n';
                commentBody += 'The following files were modified in this PR:\n\n';
                
                const fileList = modifiedFiles.split('\n').filter(f => f.trim() !== '');
                for (const file of fileList) {
                  commentBody += `- \`${file}\`\n`;
                }
                commentBody += '\n';
              }
              
              // Add summary section
              commentBody += '### Summary\n\n';
              
              const impact = process.env.COVERAGE_IMPACT;
              const significance = process.env.COVERAGE_SIGNIFICANCE;
              
              // Find the best metric to highlight
              const bestMetric = findHighlight();
              
              if (impact === 'positive') {
                commentBody += '✅ **Great job!** Test coverage has improved in this PR.\n\n';
                
                if (bestMetric && parseFloat(bestMetric.diff) > 0) {
                  commentBody += `Notable improvement in **${bestMetric.name}** coverage: ${formatDiff(bestMetric.diff)}\n\n`;
                }
                
                if (significance === 'significant') {
                  commentBody += '🎉 Excellent work! You\'ve significantly improved test coverage.';
                }
              } else {
                commentBody += '⚠️ **Warning:** Some test coverage metrics have decreased with this PR. Consider adding more tests to cover your changes.\n\n';
                
                if (significance === 'minor') {
                  commentBody += 'The decrease is small, but adding a few tests would help maintain quality.';
                } else {
                  commentBody += 'This represents a significant decrease in coverage. Please add tests to cover your changes.';
                }
              }
            }
            
            // Post the comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            }) 
=======
          github-token: ${{ secrets.GITHUB_TOKEN }}
>>>>>>> Stashed changes
