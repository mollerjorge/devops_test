name: Test Coverage Comparison

on:
  pull_request:
    branches: [ main ]

# Add permissions block to allow commenting on PR
permissions:
  contents: read
  pull-requests: write

jobs:
  coverage-comparison:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate PR coverage
        id: pr-coverage
        run: |
          npm run test:coverage
          echo "PR_COVERAGE=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $2}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
          
          # Extract file-level coverage
          echo "PR_FILES_COVERAGE<<EOF" >> $GITHUB_ENV
          grep -A 1000 "<tbody>" coverage/lcov-report/index.html | grep -B 1000 "</tbody>" | grep -v "<tbody>" | grep -v "</tbody>" > pr_files_coverage.txt
          cat pr_files_coverage.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Extract statements, branches, functions coverage
          echo "PR_STATEMENTS=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $4}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
          echo "PR_BRANCHES=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $6}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
          echo "PR_FUNCTIONS=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $8}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
          
          # Get list of modified files
          git diff --name-only ${{ github.event.pull_request.base.sha }} > modified_files.txt
          
          mkdir -p /tmp/pr-coverage
          cp -r coverage /tmp/pr-coverage
      
      - name: Checkout base branch
        run: git checkout ${{ github.event.pull_request.base.sha }}
      
      - name: Install dependencies on base branch
        run: npm ci
      
      - name: Generate base coverage
        id: base-coverage
        run: |
          npm run test:coverage
          echo "BASE_COVERAGE=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $2}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
          
          # Extract file-level coverage
          echo "BASE_FILES_COVERAGE<<EOF" >> $GITHUB_ENV
          grep -A 1000 "<tbody>" coverage/lcov-report/index.html | grep -B 1000 "</tbody>" | grep -v "<tbody>" | grep -v "</tbody>" > base_files_coverage.txt
          cat base_files_coverage.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Extract statements, branches, functions coverage
          echo "BASE_STATEMENTS=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $4}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
          echo "BASE_BRANCHES=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $6}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
          echo "BASE_FUNCTIONS=$(grep "All files" coverage/lcov-report/index.html | awk -F'>' '{print $8}' | awk -F'<' '{print $1}')" >> $GITHUB_ENV
      
      - name: Calculate coverage difference
        id: coverage-diff
        run: |
          PR_COV="${{ env.PR_COVERAGE }}"
          BASE_COV="${{ env.BASE_COVERAGE }}"
          
          # Remove percentage sign if present
          PR_COV=${PR_COV//%/}
          BASE_COV=${BASE_COV//%/}
          
          # Calculate the difference
          DIFF=$(echo "$PR_COV - $BASE_COV" | bc)
          echo "COVERAGE_DIFF=$DIFF" >> $GITHUB_ENV
          
          # Calculate statements, branches, functions differences
          PR_STMTS="${{ env.PR_STATEMENTS }}"
          BASE_STMTS="${{ env.BASE_STATEMENTS }}"
          PR_STMTS=${PR_STMTS//%/}
          BASE_STMTS=${BASE_STMTS//%/}
          STMTS_DIFF=$(echo "$PR_STMTS - $BASE_STMTS" | bc)
          echo "STMTS_DIFF=$STMTS_DIFF" >> $GITHUB_ENV
          
          PR_BRNCH="${{ env.PR_BRANCHES }}"
          BASE_BRNCH="${{ env.BASE_BRANCHES }}"
          PR_BRNCH=${PR_BRNCH//%/}
          BASE_BRNCH=${BASE_BRNCH//%/}
          BRNCH_DIFF=$(echo "$PR_BRNCH - $BASE_BRNCH" | bc)
          echo "BRNCH_DIFF=$BRNCH_DIFF" >> $GITHUB_ENV
          
          PR_FUNC="${{ env.PR_FUNCTIONS }}"
          BASE_FUNC="${{ env.BASE_FUNCTIONS }}"
          PR_FUNC=${PR_FUNC//%/}
          BASE_FUNC=${BASE_FUNC//%/}
          FUNC_DIFF=$(echo "$PR_FUNC - $BASE_FUNC" | bc)
          echo "FUNC_DIFF=$FUNC_DIFF" >> $GITHUB_ENV
          
          if (( $(echo "$DIFF >= 0" | bc -l) )); then
            ICON="‚úÖ"
          else
            ICON="‚ö†Ô∏è"
          fi
          
          echo "ICON=$ICON" >> $GITHUB_ENV
      
      - name: Extract modified files coverage
        id: modified-files
        run: |
          echo "MODIFIED_FILES_COVERAGE<<EOF" >> $GITHUB_ENV
          while read file; do
            if [[ "$file" == *.js || "$file" == *.jsx || "$file" == *.ts || "$file" == *.tsx ]]; then
              filename=$(basename "$file")
              # Look for file in coverage reports and extract data
              grep -i "$filename" pr_files_coverage.txt | head -n 1 >> modified_files_coverage.txt || echo "No coverage data for $filename" >> modified_files_coverage.txt
            fi
          done < modified_files.txt
          
          if [ -s modified_files_coverage.txt ]; then
            cat modified_files_coverage.txt >> $GITHUB_ENV
          else
            echo "No coverage data found for modified files" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create basic comment file
        run: |
          cat > comment.md << 'EOL'
          ## Test Coverage Report ${{ env.ICON }}

          ### Overview

          | Metric | Base Branch | PR Branch | Difference |
          | ------ | :---------: | :-------: | :--------: |
          | **Lines** | ${{ env.BASE_COVERAGE }} | ${{ env.PR_COVERAGE }} | LINES_DIFF |
          | **Statements** | ${{ env.BASE_STATEMENTS }} | ${{ env.PR_STATEMENTS }} | STMTS_DIFF |
          | **Branches** | ${{ env.BASE_BRANCHES }} | ${{ env.PR_BRANCHES }} | BRNCH_DIFF |
          | **Functions** | ${{ env.BASE_FUNCTIONS }} | ${{ env.PR_FUNCTIONS }} | FUNC_DIFF |

          ### Modified Files Coverage

          ${{ env.MODIFIED_FILES_COVERAGE }}

          ### Summary

          SUMMARY_MESSAGE
          EOL

          # Replace placeholders with actual values
          if (( $(echo "${{ env.COVERAGE_DIFF }} >= 0" | bc -l) )); then
            LINES_DIFF="‚úÖ +${{ env.COVERAGE_DIFF }}%"
            SUMMARY="‚úÖ **Great job!** Test coverage has increased or remained the same."
            
            if (( $(echo "${{ env.COVERAGE_DIFF }} >= 5" | bc -l) )); then
              SUMMARY="$SUMMARY\n\nüéâ Excellent work! You've significantly improved test coverage."
            fi
          else
            LINES_DIFF="‚ö†Ô∏è ${{ env.COVERAGE_DIFF }}%"
            SUMMARY="‚ö†Ô∏è **Warning:** Test coverage has decreased with this PR. Consider adding more tests to cover your changes."
            
            if (( $(echo "${{ env.COVERAGE_DIFF }} > -5" | bc -l) )); then
              SUMMARY="$SUMMARY\n\nThe decrease is small, but adding a few tests would help maintain quality."
            else
              SUMMARY="$SUMMARY\n\nThis represents a significant decrease in coverage. Please add tests to cover your changes."
            fi
          fi
          
          # Apply statement diff formatting
          if (( $(echo "${{ env.STMTS_DIFF }} >= 0" | bc -l) )); then
            STMTS_DIFF="‚úÖ +${{ env.STMTS_DIFF }}%"
          else
            STMTS_DIFF="‚ö†Ô∏è ${{ env.STMTS_DIFF }}%"
          fi
          
          # Apply branch diff formatting
          if (( $(echo "${{ env.BRNCH_DIFF }} >= 0" | bc -l) )); then
            BRNCH_DIFF="‚úÖ +${{ env.BRNCH_DIFF }}%"
          else
            BRNCH_DIFF="‚ö†Ô∏è ${{ env.BRNCH_DIFF }}%"
          fi
          
          # Apply function diff formatting
          if (( $(echo "${{ env.FUNC_DIFF }} >= 0" | bc -l) )); then
            FUNC_DIFF="‚úÖ +${{ env.FUNC_DIFF }}%"
          else
            FUNC_DIFF="‚ö†Ô∏è ${{ env.FUNC_DIFF }}%"
          fi
          
          # Replace the placeholders
          sed -i "s/LINES_DIFF/$LINES_DIFF/g" comment.md
          sed -i "s/STMTS_DIFF/$STMTS_DIFF/g" comment.md
          sed -i "s/BRNCH_DIFF/$BRNCH_DIFF/g" comment.md
          sed -i "s/FUNC_DIFF/$FUNC_DIFF/g" comment.md
          sed -i "s/SUMMARY_MESSAGE/$SUMMARY/g" comment.md

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const commentContent = fs.readFileSync('comment.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentContent
            }) 