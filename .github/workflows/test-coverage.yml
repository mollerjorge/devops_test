name: Test Coverage Comparison

on:
  pull_request:
    branches: [ main ]

# Add permissions block to allow commenting on PR
permissions:
  contents: read
  pull-requests: write

jobs:
  coverage-comparison:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate PR coverage
        id: pr-coverage
        run: |
          npm run test:coverage
          
          # Extract basic coverage metrics from the Jest output in the console
          COVERAGE_OUTPUT=$(npm run test:coverage 2>&1)
          echo "$COVERAGE_OUTPUT" > pr_coverage_output.txt
          
          # Extract the lines coverage percentage
          PR_LINE_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $5}')
          PR_STATEMENT_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $3}')
          PR_BRANCH_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $4}')
          PR_FUNCTION_COVERAGE=$(grep "All files" pr_coverage_output.txt | awk '{print $5}')
          
          # Store the metrics
          echo "PR_LINE_COVERAGE=${PR_LINE_COVERAGE}" >> $GITHUB_ENV
          echo "PR_STATEMENT_COVERAGE=${PR_STATEMENT_COVERAGE}" >> $GITHUB_ENV
          echo "PR_BRANCH_COVERAGE=${PR_BRANCH_COVERAGE}" >> $GITHUB_ENV
          echo "PR_FUNCTION_COVERAGE=${PR_FUNCTION_COVERAGE}" >> $GITHUB_ENV
          
          # Save the list of modified files for later use
          git diff --name-only ${{ github.event.pull_request.base.sha }} > modified_files.txt
      
      - name: Checkout base branch
        run: git checkout ${{ github.event.pull_request.base.sha }}
      
      - name: Install dependencies on base branch
        run: npm ci
      
      - name: Generate base coverage
        id: base-coverage
        run: |
          # Run tests with coverage and capture output
          COVERAGE_OUTPUT=$(npm run test:coverage 2>&1)
          echo "$COVERAGE_OUTPUT" > base_coverage_output.txt
          
          # Extract the coverage percentages
          BASE_LINE_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $5}')
          BASE_STATEMENT_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $3}')
          BASE_BRANCH_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $4}')
          BASE_FUNCTION_COVERAGE=$(grep "All files" base_coverage_output.txt | awk '{print $5}')
          
          # Store the metrics
          echo "BASE_LINE_COVERAGE=${BASE_LINE_COVERAGE}" >> $GITHUB_ENV
          echo "BASE_STATEMENT_COVERAGE=${BASE_STATEMENT_COVERAGE}" >> $GITHUB_ENV
          echo "BASE_BRANCH_COVERAGE=${BASE_BRANCH_COVERAGE}" >> $GITHUB_ENV
          echo "BASE_FUNCTION_COVERAGE=${BASE_FUNCTION_COVERAGE}" >> $GITHUB_ENV
      
      - name: Generate coverage report
        id: report
        run: |
          # Check if coverage data was successfully extracted
          if [ -z "${{ env.PR_LINE_COVERAGE }}" ] || [ -z "${{ env.BASE_LINE_COVERAGE }}" ]; then
            echo "Failed to extract coverage data. Using simplified metrics."
            echo "PR_COVERAGE_FOUND=false" >> $GITHUB_ENV
          else
            echo "PR_COVERAGE_FOUND=true" >> $GITHUB_ENV
            
            # Process coverage values (remove % sign if present)
            PR_LINE=${PR_LINE_COVERAGE//%/}
            BASE_LINE=${BASE_LINE_COVERAGE//%/}
            PR_STMT=${PR_STATEMENT_COVERAGE//%/}
            BASE_STMT=${BASE_STATEMENT_COVERAGE//%/}
            PR_BRNCH=${PR_BRANCH_COVERAGE//%/}
            BASE_BRNCH=${BASE_BRANCH_COVERAGE//%/}
            PR_FUNC=${PR_FUNCTION_COVERAGE//%/}
            BASE_FUNC=${BASE_FUNCTION_COVERAGE//%/}
            
            # Calculate differences
            LINE_DIFF=$(echo "$PR_LINE - $BASE_LINE" | bc -l)
            STMT_DIFF=$(echo "$PR_STMT - $BASE_STMT" | bc -l)
            BRNCH_DIFF=$(echo "$PR_BRNCH - $BASE_BRNCH" | bc -l)
            FUNC_DIFF=$(echo "$PR_FUNC - $BASE_FUNC" | bc -l)
            
            # Save the differences
            echo "LINE_DIFF=${LINE_DIFF}" >> $GITHUB_ENV
            echo "STMT_DIFF=${STMT_DIFF}" >> $GITHUB_ENV
            echo "BRNCH_DIFF=${BRNCH_DIFF}" >> $GITHUB_ENV
            echo "FUNC_DIFF=${FUNC_DIFF}" >> $GITHUB_ENV
            
            # Generate impact assessment
            if (( $(echo "$LINE_DIFF >= 0" | bc -l) )); then
              echo "COVERAGE_IMPACT=positive" >> $GITHUB_ENV
              if (( $(echo "$LINE_DIFF >= 5" | bc -l) )); then
                echo "COVERAGE_SIGNIFICANCE=significant" >> $GITHUB_ENV
              else
                echo "COVERAGE_SIGNIFICANCE=minor" >> $GITHUB_ENV
              fi
            else
              echo "COVERAGE_IMPACT=negative" >> $GITHUB_ENV
              if (( $(echo "$LINE_DIFF <= -5" | bc -l) )); then
                echo "COVERAGE_SIGNIFICANCE=significant" >> $GITHUB_ENV
              else
                echo "COVERAGE_SIGNIFICANCE=minor" >> $GITHUB_ENV
              fi
            fi
          fi
          
          # Extract the list of modified files with JS/TS extensions
          echo "MODIFIED_FILES=" > modified_files_report.txt
          grep -E "\.(js|jsx|ts|tsx)$" modified_files.txt >> modified_files_report.txt
      
      - name: Post coverage comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Helper function to format coverage values
            const formatCoverage = (value) => {
              if (!value) return 'N/A';
              return value.includes('%') ? value : `${value}%`;
            };
            
            // Helper function to format differences
            const formatDiff = (value) => {
              if (!value) return 'N/A';
              const numValue = parseFloat(value);
              if (isNaN(numValue)) return 'N/A';
              return numValue >= 0 ? `+${numValue.toFixed(2)}%` : `${numValue.toFixed(2)}%`;
            };
            
            // Helper function to create status indicators
            const getStatusIcon = (value) => {
              if (!value) return '';
              const numValue = parseFloat(value);
              if (isNaN(numValue)) return '';
              return numValue >= 0 ? '✅' : '⚠️';
            };
            
            // Build comment heading
            let commentBody = '## Test Coverage Report\n\n';
            
            // Check if we got valid coverage data
            const coverageFound = process.env.PR_COVERAGE_FOUND === 'true';
            if (!coverageFound) {
              commentBody += '⚠️ Coverage data could not be properly extracted. Please check the workflow logs for details.\n\n';
            } else {
              // Build the overview section
              commentBody += '### Overview\n\n';
              commentBody += '| Metric | Base Branch | PR Branch | Difference |\n';
              commentBody += '| ------ | :---------: | :-------: | :--------: |\n';
              
              // Add line coverage
              const lineDiff = process.env.LINE_DIFF;
              commentBody += `| **Lines** | ${formatCoverage(process.env.BASE_LINE_COVERAGE)} | ${formatCoverage(process.env.PR_LINE_COVERAGE)} | ${getStatusIcon(lineDiff)} ${formatDiff(lineDiff)} |\n`;
              
              // Add statement coverage
              const stmtDiff = process.env.STMT_DIFF;
              commentBody += `| **Statements** | ${formatCoverage(process.env.BASE_STATEMENT_COVERAGE)} | ${formatCoverage(process.env.PR_STATEMENT_COVERAGE)} | ${getStatusIcon(stmtDiff)} ${formatDiff(stmtDiff)} |\n`;
              
              // Add branch coverage
              const brnchDiff = process.env.BRNCH_DIFF;
              commentBody += `| **Branches** | ${formatCoverage(process.env.BASE_BRANCH_COVERAGE)} | ${formatCoverage(process.env.PR_BRANCH_COVERAGE)} | ${getStatusIcon(brnchDiff)} ${formatDiff(brnchDiff)} |\n`;
              
              // Add function coverage
              const funcDiff = process.env.FUNC_DIFF;
              commentBody += `| **Functions** | ${formatCoverage(process.env.BASE_FUNCTION_COVERAGE)} | ${formatCoverage(process.env.PR_FUNCTION_COVERAGE)} | ${getStatusIcon(funcDiff)} ${formatDiff(funcDiff)} |\n\n`;
              
              // Add modified files section
              let modifiedFiles = '';
              try {
                if (fs.existsSync('modified_files_report.txt')) {
                  modifiedFiles = fs.readFileSync('modified_files_report.txt', 'utf8');
                }
              } catch (error) {
                modifiedFiles = 'Error reading modified files: ' + error.message;
              }
              
              if (modifiedFiles && !modifiedFiles.includes('MODIFIED_FILES=')) {
                commentBody += '### Modified Files\n\n';
                commentBody += 'The following files were modified in this PR:\n\n';
                
                const fileList = modifiedFiles.split('\n').filter(f => f.trim() !== '');
                for (const file of fileList) {
                  commentBody += `- \`${file}\`\n`;
                }
                commentBody += '\n';
              }
              
              // Add summary section
              commentBody += '### Summary\n\n';
              
              const impact = process.env.COVERAGE_IMPACT;
              const significance = process.env.COVERAGE_SIGNIFICANCE;
              
              if (impact === 'positive') {
                commentBody += '✅ **Great job!** Test coverage has increased or remained the same.\n\n';
                
                if (significance === 'significant') {
                  commentBody += '🎉 Excellent work! You\'ve significantly improved test coverage.';
                }
              } else {
                commentBody += '⚠️ **Warning:** Test coverage has decreased with this PR. Consider adding more tests to cover your changes.\n\n';
                
                if (significance === 'minor') {
                  commentBody += 'The decrease is small, but adding a few tests would help maintain quality.';
                } else {
                  commentBody += 'This represents a significant decrease in coverage. Please add tests to cover your changes.';
                }
              }
            }
            
            // Post the comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            }) 