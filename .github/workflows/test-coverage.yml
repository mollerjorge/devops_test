name: Test Coverage Comparison

on:
  pull_request:
    branches: [ main ]

# Add permissions block to allow commenting on PR
permissions:
  contents: read
  pull-requests: write

jobs:
  coverage-comparison:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate PR coverage
        id: pr-coverage
        run: |
          npm run test:coverage > coverage_output.txt
          # Extract coverage data directly from console output
          LINES=$(grep "All files" coverage_output.txt | awk '{print $5}')
          STATEMENTS=$(grep "All files" coverage_output.txt | awk '{print $3}')
          BRANCHES=$(grep "All files" coverage_output.txt | awk '{print $4}')
          FUNCTIONS=$(grep "All files" coverage_output.txt | awk '{print $5}')
          
          echo "PR_COVERAGE=$LINES" >> $GITHUB_ENV
          echo "PR_STATEMENTS=$STATEMENTS" >> $GITHUB_ENV
          echo "PR_BRANCHES=$BRANCHES" >> $GITHUB_ENV
          echo "PR_FUNCTIONS=$FUNCTIONS" >> $GITHUB_ENV
          
          # Create a file with modified files coverage
          echo "PR_FILES_COVERAGE<<EOF" >> $GITHUB_ENV
          grep -A 100 "File " coverage_output.txt | grep -B 100 "Test Suites:" | grep -v "File " | grep -v "All files" | grep -v "Test Suites:" | grep -v "\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Get list of modified files
          git diff --name-only ${{ github.event.pull_request.base.sha }} > modified_files.txt
          mkdir -p /tmp/pr-coverage
          cp coverage_output.txt /tmp/pr-coverage/
      
      - name: Checkout base branch
        run: git checkout ${{ github.event.pull_request.base.sha }}
      
      - name: Install dependencies on base branch
        run: npm ci
      
      - name: Generate base coverage
        id: base-coverage
        run: |
          npm run test:coverage > coverage_output.txt
          # Extract coverage data directly from console output
          LINES=$(grep "All files" coverage_output.txt | awk '{print $5}')
          STATEMENTS=$(grep "All files" coverage_output.txt | awk '{print $3}')
          BRANCHES=$(grep "All files" coverage_output.txt | awk '{print $4}')
          FUNCTIONS=$(grep "All files" coverage_output.txt | awk '{print $5}')
          
          echo "BASE_COVERAGE=$LINES" >> $GITHUB_ENV
          echo "BASE_STATEMENTS=$STATEMENTS" >> $GITHUB_ENV
          echo "BASE_BRANCHES=$BRANCHES" >> $GITHUB_ENV
          echo "BASE_FUNCTIONS=$FUNCTIONS" >> $GITHUB_ENV
      
      - name: Calculate coverage difference
        id: coverage-diff
        run: |
          # Remove percentage sign if present
          PR_COV="${{ env.PR_COVERAGE }}"
          BASE_COV="${{ env.BASE_COVERAGE }}"
          PR_COV=${PR_COV//%/}
          BASE_COV=${BASE_COV//%/}
          
          # Calculate the difference
          DIFF=$(echo "$PR_COV - $BASE_COV" | bc -l)
          echo "COVERAGE_DIFF=$DIFF" >> $GITHUB_ENV
          
          # Calculate statements, branches, functions differences
          PR_STMTS="${{ env.PR_STATEMENTS }}"
          BASE_STMTS="${{ env.BASE_STATEMENTS }}"
          PR_STMTS=${PR_STMTS//%/}
          BASE_STMTS=${BASE_STMTS//%/}
          STMTS_DIFF=$(echo "$PR_STMTS - $BASE_STMTS" | bc -l)
          echo "STMTS_DIFF=$STMTS_DIFF" >> $GITHUB_ENV
          
          PR_BRNCH="${{ env.PR_BRANCHES }}"
          BASE_BRNCH="${{ env.BASE_BRANCHES }}"
          PR_BRNCH=${PR_BRNCH//%/}
          BASE_BRNCH=${BASE_BRNCH//%/}
          BRNCH_DIFF=$(echo "$PR_BRNCH - $BASE_BRNCH" | bc -l)
          echo "BRNCH_DIFF=$BRNCH_DIFF" >> $GITHUB_ENV
          
          PR_FUNC="${{ env.PR_FUNCTIONS }}"
          BASE_FUNC="${{ env.BASE_FUNCTIONS }}"
          PR_FUNC=${PR_FUNC//%/}
          BASE_FUNC=${BASE_FUNC//%/}
          FUNC_DIFF=$(echo "$PR_FUNC - $BASE_FUNC" | bc -l)
          echo "FUNC_DIFF=$FUNC_DIFF" >> $GITHUB_ENV
          
          if (( $(echo "$DIFF >= 0" | bc -l) )); then
            ICON="✅"
          else
            ICON="⚠️"
          fi
          
          echo "ICON=$ICON" >> $GITHUB_ENV
      
      - name: Create modified files report
        id: modified-files
        run: |
          echo "MODIFIED_FILES_REPORT<<EOF" >> $GITHUB_ENV
          echo "Files changed in this PR:" >> modified_files_report.txt
          echo "" >> modified_files_report.txt
          
          while read file; do
            if [[ "$file" == *.js || "$file" == *.jsx || "$file" == *.ts || "$file" == *.tsx ]]; then
              filename=$(basename "$file")
              echo "- $file" >> modified_files_report.txt
            fi
          done < modified_files.txt
          
          if [ -s modified_files_report.txt ]; then
            cat modified_files_report.txt >> $GITHUB_ENV
          else
            echo "No JavaScript/TypeScript files were modified in this PR." >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const icon = process.env.ICON;
            const diff = process.env.COVERAGE_DIFF;
            const prCoverage = process.env.PR_COVERAGE;
            const baseCoverage = process.env.BASE_COVERAGE;
            
            const prStatements = process.env.PR_STATEMENTS;
            const baseStatements = process.env.BASE_STATEMENTS;
            const stmtsDiff = process.env.STMTS_DIFF;
            
            const prBranches = process.env.PR_BRANCHES;
            const baseBranches = process.env.BASE_BRANCHES;
            const brnchDiff = process.env.BRNCH_DIFF;
            
            const prFunctions = process.env.PR_FUNCTIONS;
            const baseFunctions = process.env.BASE_FUNCTIONS;
            const funcDiff = process.env.FUNC_DIFF;
            
            const prFilesCoverage = process.env.PR_FILES_COVERAGE;
            const modifiedFilesReport = process.env.MODIFIED_FILES_REPORT;
            
            // Format differences with + sign for positive changes
            const formatDiff = (val) => {
              const num = parseFloat(val);
              return num >= 0 ? `+${num.toFixed(2)}%` : `${num.toFixed(2)}%`;
            };
            
            // Create status indicators
            const statusIcon = (val) => {
              const num = parseFloat(val);
              return num >= 0 ? '✅' : '⚠️';
            };
            
            // Simple comment to avoid YAML errors
            let body = `## Test Coverage Report ${icon}\n\n`;
            
            // Add Overview section
            body += `### Overview\n\n`;
            body += `| Metric | Base Branch | PR Branch | Difference |\n`;
            body += `| ------ | :---------: | :-------: | :--------: |\n`;
            body += `| **Lines** | ${baseCoverage} | ${prCoverage} | ${statusIcon(diff)} ${formatDiff(diff)} |\n`;
            body += `| **Statements** | ${baseStatements} | ${prStatements} | ${statusIcon(stmtsDiff)} ${formatDiff(stmtsDiff)} |\n`;
            body += `| **Branches** | ${baseBranches} | ${prBranches} | ${statusIcon(brnchDiff)} ${formatDiff(brnchDiff)} |\n`;
            body += `| **Functions** | ${baseFunctions} | ${prFunctions} | ${statusIcon(funcDiff)} ${formatDiff(funcDiff)} |\n\n`;
            
            // Add Files Coverage section
            body += `### Files Coverage\n\n`;
            body += "```\n";
            body += prFilesCoverage || "No coverage data available";
            body += "\n```\n\n";
            
            // Add Modified Files section
            body += `### Modified Files\n\n`;
            body += modifiedFilesReport || "No modified files found";
            body += "\n\n";
            
            // Add Summary section
            body += `### Summary\n\n`;
            
            if (parseFloat(diff) >= 0) {
              body += `✅ **Great job!** Test coverage has increased or remained the same.\n\n`;
              
              if (parseFloat(diff) >= 5) {
                body += `🎉 Excellent work! You've significantly improved test coverage.`;
              }
            } else {
              body += `⚠️ **Warning:** Test coverage has decreased with this PR. Consider adding more tests to cover your changes.\n\n`;
              
              if (parseFloat(diff) > -5) {
                body += `The decrease is small, but adding a few tests would help maintain quality.`;
              } else {
                body += `This represents a significant decrease in coverage. Please add tests to cover your changes.`;
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            }) 